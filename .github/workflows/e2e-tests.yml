name: Run E2E tests

on: 
  push:
    branches:
      - feature/*

jobs:
  # this is needed to wait for the new docker image to be build and published to the registry
  # so that we can use the image to run ui of the needed commit related version as part of local-env
  # the idea is taken from here https://stackoverflow.com/a/71489231
  push_to_registry:
    uses: ./.github/workflows/docker-build-and-push.yml
    # without this it cannot login to the registry
    secrets: inherit

  e2e_test:
    needs: push_to_registry
    name: Run E2E tests
    runs-on: ubuntu-22.04

    steps:
      - name: Check out the repo
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          pip install boto3

      - name: Configure AWS credentials
        run: |
          mkdir -p ~/.aws
          echo "[default]\naws_access_key_id=admin\naws_secret_access_key=rootPassword" > ~/.aws/credentials

      - name: Start MinIO server
        run: |
          docker run -d -p 9000:9000 -p 9090:9090 --name minio \
            -e "MINIO_ROOT_USER=admin" \
            -e "MINIO_ROOT_PASSWORD=rootPassword" \
            minio/minio server /data --console-address ":9090"
          
          echo "Waiting for MinIO..."
          until curl -s http://localhost:9000/minio/health/live; do
            sleep 1
          done

      - name: Configure MinIO
        run: |
          docker exec minio mc alias set local http://localhost:9000 admin rootPassword
          docker exec minio mc mb local/pelican-backups
          docker exec minio mc alias set source http://localhost:9000 admin rootPassword
          docker exec minio mc mb source/pelican-source || true
          sleep 5

      - name: Prepare test data in source S3
        run: |
          docker exec minio mc alias set source http://localhost:9000 admin rootPassword
          docker exec minio mb source/pelican-source || true
          echo "test content" | docker exec -i minio mc pipe source/pelican-source/test_file.txt


      - name: Run S3 backup tests
        env:
          S3_BACKUPS_FILENAME_PREFIX: pelican-s3-backup
          SOURCE_S3_AWS_ENDPOINT: http://localhost:9000
          SOURCE_S3_AWS_ACCESS_KEY_ID: admin
          SOURCE_S3_AWS_SECRET_ACCESS_KEY: rootPassword
          SOURCE_S3_AWS_BUCKET_NAME: pelican-source
          SOURCE_S3_AWS_BUCKET_SUBFOLDER_NAME: ""
          DESTINATION_S3_AWS_ENDPOINT: http://localhost:9000
          DESTINATION_S3_AWS_ACCESS_KEY_ID: admin
          DESTINATION_S3_AWS_SECRET_ACCESS_KEY: rootPassword
          DESTINATION_S3_AWS_BUCKET_NAME: pelican-backups
        run: |
          python s3-backup.py
          python s3_e2e_test.py